#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build WNDR3800 OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

permissions:
  checks: write
  contents: write
  pages: write
  id-token: write
  
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: coolsnowwolf.feeds.conf.default
  CONFIG_FILE: wndr3800.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.lean.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: true
  UPLOAD_WSS: true
  UPLOAD_TRS: true
  UPLOAD_gof: true
  UPLOAD_lit: true
  UPLOAD_gg: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd $GITHUB_WORKSPACE/openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files $GITHUB_WORKSPACE/openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $GITHUB_WORKSPACE/openwrt/.config
        chmod +x $DIY_P2_SH
        cd $GITHUB_WORKSPACE/openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        # make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Zip files
      run: |
        mkdir upload_files
        cd $GITHUB_WORKSPACE/openwrt/bin
        tar -zcvf $GITHUB_WORKSPACE/upload_files/packages${{ env.FILE_DATE }}.tar.gz packages
        tar -zcvf $GITHUB_WORKSPACE/upload_files/targets${{ env.FILE_DATE }}.tar.gz targets
        cd $GITHUB_WORKSPACE/upload_files
        echo "UPLOADFILES=$PWD" >> $GITHUB_ENV
        
    - name: Upload firmware to fic
      id: gof
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_gof == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer gof -p 16 --no-progress upload_files 2>&1  | tee gof.log
        echo "::warning file=1fichier.com::$(cat gof.log | grep https)"
        echo "url=$(cat gof.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
        
    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress upload_files 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")"  >> $GITHUB_OUTPUT
    
    - name: Upload firmware to wenshushu
      id: wss
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WSS == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wss --block 2621440 -s -p 64 --no-progress upload_files 2>&1 | tee wss.log
        echo "::warning file=wenshushu.cn::$(cat wss.log | grep https)"
        echo "url=$(cat wss.log | grep https | cut -f3 -d" ")"  >> $GITHUB_OUTPUT
       
    - name: Upload firmware to trs
      id: trs
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_TRS == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer trs --no-progress upload_files 2>&1 | tee trs.log
        echo "::warning file=transfer.sh::$(cat trs.log | grep https)"
        echo "url=$(cat trs.log | grep https | cut -f3 -d" ")"  >> $GITHUB_OUTPUT

    - name: Upload firmware to muse
      id: lit
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_lit == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer lit --no-progress upload_files 2>&1 | tee lit.log
        echo "::warning file=litterbox.catbox.moe::$(cat lit.log | grep https)"
        echo "url=$(cat lit.log | grep https | cut -f3 -d" ")"  >> $GITHUB_OUTPUT

    - name: Upload firmware to anon
      id: gg
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_gg == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer gg --no-progress upload_files 2>&1 | tee gg.log
        echo "::warning file=anonfile.com::$(cat gg.log | grep https)"
        echo "url=$(cat gg.log | grep https | cut -f3 -d" ")"  >> $GITHUB_OUTPUT

    - name: Read release body
      id: read_release
      shell: bash
      run: |
        r='<div>🎉🎉🎉🎉🎉🎉🎉🎉</div>'
        if [ ${{env.UPLOAD_fic}} == 'true' ];then
           r=$r'<p> 🌈 GoFile ⭐ <a target="_blank" href="${{ steps.gof.outputs.url }}" ><span class="px-1 text-bold">🔗</span></a> </p>'
        fi
        if [ ${{env.UPLOAD_WETRANSFER}} == 'true' ];then
          r=$r'<p> 🌈 WeTransfer ⭐ <a target="_blank" href="${{ steps.wetransfer.outputs.url }}"><span class="px-1 text-bold">🔗</span></a></p>'
        fi
        if [ ${{env.UPLOAD_WSS}} == 'true' ];then
          r=$r'<p> 🌈 Wenshushu ⭐ <a target="_blank" href="${{ steps.wss.outputs.url }}"><span class="px-1 text-bold">🔗</span></a></p>'
        fi
        if [ ${{env.UPLOAD_TRS}} == 'true' ];then
          r=$r'<p> 🌈 Transfer ⭐ <a target="_blank" href="${{ steps.trs.outputs.url }}"><span class="px-1 text-bold">🔗</span></a></p>'
        fi
        if [ ${{env.UPLOAD_muse}} == 'true' ];then
          r=$r'<p> 🌈 LitterBox ⭐ <a target="_blank" href="${{ steps.lit.outputs.url }}"><span class="px-1 text-bold">🔗</span></a></p>'
        fi
        if [ ${{env.UPLOAD_anon}} == 'true' ];then
          r=$r'<p> 🌈 DownloadGG ⭐ <a target="_blank" href="${{ steps.gg.outputs.url }}"><span class="px-1 text-bold">🔗</span></a></p>'
        fi
        echo "RELEASE_BODY=$r" >> $GITHUB_OUTPUT
    
    - name: Upload Firmware to Github Release
      uses: svenstaro/upload-release-action@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        body: ${{ steps.read_release.outputs.RELEASE_BODY }}
        file: ${{ env.FIRMWARE }}
        file_glob: true
        tag: ${{ steps.tag.outputs.release_tag }}
        overwrite: true

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
